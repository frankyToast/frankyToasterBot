"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BufWrapper = void 0;
const uuid_1 = require("@minecraft-js/uuid");
const node_buffer_1 = require("node:buffer");
const varint = require("varint");
class BufWrapper {
    /**
     * Create a new buffer wrapper instance
     * @param buffer The NodeJS buffer to wrap, optional
     * @param options Options to apply to the buffer wrapper, optional
     */
    constructor(buffer, options) {
        this.buffer = buffer || node_buffer_1.Buffer.alloc(0);
        this.offset = 0;
        this.buffers = [];
        this.options = options;
        this.plugins = {};
        if (options?.plugins) {
            for (const plugin of Object.keys(options.plugins)) {
                /**
                 * Not gonna lie, this is very hacky but with
                 * this TypeScript doesn't complain. The following
                 * creates an empty object and set it to this.plugins[pluginName]
                 * if it doesn't already exist
                 */
                if (!this.plugins[plugin])
                    this.plugins[plugin] = {};
                for (const method of Object.keys(options.plugins[plugin]))
                    if (!this.plugins[plugin][method])
                        this.plugins[plugin][method] = options.plugins[plugin][method].bind(this);
            }
        }
    }
    /**
     * Write a varint to the buffer
     * @param value The value to write (number)
     * @example
     * ```javascript
     * const buf = new BufWrapper();
     * buf.writeVarInt(300);
     * console.log(buf.buffer); // <Buffer ac 02>
     * ```
     */
    writeVarInt(value) {
        const encoded = varint.encode(value);
        this.writeToBuffer(node_buffer_1.Buffer.from(encoded));
    }
    /**
     * Read a varint from the buffer
     * @returns The varint value read from the buffer
     * @example
     * ```javascript
     * const buffer = Buffer.from([0xac, 0x02]);
     * const buf = new BufWrapper(buffer);
     * const decoded = buf.readVarInt();
     * console.log(decoded); // 300
     * ```
     */
    readVarInt() {
        const value = varint.decode(this.buffer, this.offset);
        this.offset += varint.decode.bytes;
        return value;
    }
    /**
     * Write a string to the buffer (will use the ut8 encoding)
     * @param value The value to write (string)
     * @example
     * ```javascript
     * const buf = new BufWrapper();
     * buf.writeString('Hello World');
     * console.log(buf.buffer); // <Buffer 0b 48 65 6c 6c 6f 20 57 6f 72 6c 64>
     * ```
     */
    writeString(value) {
        this.writeVarInt(value.length);
        this.writeToBuffer(node_buffer_1.Buffer.from(value));
    }
    /**
     * Read a string from the buffer (will use the ut8 encoding)
     * @returns The string value read from the buffer
     * @example
     * ```javascript
     * const buffer = Buffer.from([0x0b, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64]);
     * const buf = new BufWrapper(buffer);
     * const decoded = buf.readString();
     * console.log(decoded); // Hello World
     * ```
     */
    readString() {
        const length = this.readVarInt();
        const value = this.buffer.toString('utf8', this.offset, this.offset + length);
        this.offset += length;
        return value;
    }
    /**
     * Write an integer to the buffer
     * @param value The value to write (number)
     * @example
     * ```javascript
     * const buf = new BufWrapper();
     * buf.writeInt(123);
     * console.log(buf.buffer); // <Buffer 00 00 00 7b>
     * ```
     */
    writeInt(value) {
        const buf = node_buffer_1.Buffer.alloc(4);
        buf.writeInt32BE(value);
        this.writeToBuffer(buf);
    }
    /**
     * Read an integer from the buffer
     * @returns The integer value read from the buffer
     * @example
     * ```javascript
     * const buffer = Buffer.from([0x00, 0x00, 0x00, 0x7b]);
     * const buf = new BufWrapper(buffer);
     * const decoded = buf.readInt();
     * console.log(decoded); // 123
     * ```
     */
    readInt() {
        const value = this.buffer.readInt32BE(this.offset);
        this.offset += 4;
        return value;
    }
    /**
     * Write a long to the buffer
     * @param value The value to write (number)
     * @example
     * ```javascript
     * const buf = new BufWrapper();
     * buf.writeLong(123456789);
     * console.log(buf.buffer); // <Buffer 00 00 00 00 07 5b cd 15>
     * ```
     */
    writeLong(value) {
        const buf = node_buffer_1.Buffer.alloc(8);
        buf.writeBigInt64BE(BigInt(value));
        this.writeToBuffer(buf);
    }
    /**
     * Read a long from the buffer
     * @returns The long value read from the buffer
     * @example
     * ```javascript
     * const buffer = Buffer.from([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x5b, 0xcd, 0x15]);
     * const buf = new BufWrapper(buffer);
     * const decoded = buf.readLong();
     * console.log(decoded); // 123456789
     * ```
     */
    readLong() {
        const value = this.buffer.readBigInt64BE(this.offset);
        this.offset += 8;
        return Number(value);
    }
    /**
     * Write an array of strings to the buffer
     * @param value The value to write (string[])
     * @example
     * ```javascript
     * const buf = new BufWrapper();
     * buf.writeStringArray(['Hello', 'World']);
     * console.log(buf.buffer); // <Buffer 02 05 48 65 6c 6c 6f 05 57 6f 72 6c 64>
     * ```
     */
    writeStringArray(value) {
        this.writeVarInt(value.length);
        value.forEach((v) => this.writeString(v));
    }
    /**
     * Read an array of strings from the buffer
     * @returns The array read from the buffer
     * @example
     * ```javascript
     * const buffer = Buffer.from([0x02, 0x05, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x05, 0x57, 0x6f, 0x72, 0x6c, 0x64]);
     * const buf = new BufWrapper(buffer);
     * const decoded = buf.readStringArray();
     * console.log(decoded); // ['Hello', 'World']
     * ```
     */
    readStringArray() {
        const length = this.readVarInt();
        const value = [];
        for (let i = 0; i < length; i++) {
            value.push(this.readString());
        }
        return value;
    }
    /**
     * Write an array of ints to the buffer
     * @param value The value to write (number[])
     * @example
     * ```javascript
     * const buf = new BufWrapper();
     * buf.writeIntArray([1, 2, 3]);
     * console.log(buf.buffer); // <Buffer 03 00 00 00 01 00 00 00 02 00 00 00 03>
     * ```
     */
    writeIntArray(value) {
        this.writeVarInt(value.length);
        value.forEach((v) => this.writeInt(v));
    }
    /**
     * Read an array of ints from the buffer
     * @returns The array read from the buffer
     * @example
     * ```javascript
     * const buffer = Buffer.from([ 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03 ]);
     * const buf = new BufWrapper(buffer);
     * const decoded = buf.readIntArray();
     * console.log(decoded); // [ 1, 2, 3 ]
     * ```
     */
    readIntArray() {
        const length = this.readVarInt();
        const value = [];
        for (let i = 0; i < length; i++) {
            value.push(this.readInt());
        }
        return value;
    }
    /**
     * Write an UUID to the buffer
     * @param value The value to write (`UUID` instance)
     * @example
     * ```javascript
     * import { parseUUID } from '@minecraft-js/uuid';
     * const uuid = parseUUID('c09b74b4-8c14-44cb-b567-6576a2daf1f9');
     *
     * const buf = new BufWrapper();
     * buf.writeUUID(uuid);
     * console.log(buf.buffer); // <Buffer C0 9B 74 B4 8C 14 44 CB B5 67 65 76 A2 DA F1 F9>
     * ```
     */
    writeUUID(value) {
        this.writeBytes(value.getMostSignificantBits());
        this.writeBytes(value.getLeastSignificantBits());
    }
    /**
     * Read an UUID from the buffer
     * @returns The UUID read from the buffer
     * @example
     * ```javascript
     * const buffer = Buffer.from([ 0xC0, 0x9B, 0x74, 0xB4, 0x8C, 0x14, 0x44, 0xCB, 0xB5, 0x67, 0x65, 0x76, 0xA2, 0xDA, 0xF1, 0xF9 ]);
     * const buf = new BufWrapper(buffer);
     * const decoded = buf.readUUID();
     * console.log(decoded); // UUID <c09b74b4-8c14-44cb-b567-6576a2daf1f9>
     * ```
     */
    readUUID() {
        const mostSigBits = this.buffer.subarray(this.offset, this.offset + 8);
        const leastSigBits = this.buffer.subarray(this.offset + 8, this.offset + 16);
        this.offset += 16;
        return new uuid_1.UUID(mostSigBits, leastSigBits);
    }
    /**
     * Write raw bytes to the buffer
     * @param value The value to write (a buffer or an array of bytes)
     * @example
     * ```javascript
     * const buf = new BufWrapper();
     * buf.writeBytes([ 0x01, 0x02, 0x03 ]);
     * console.log(buf.buffer); // <Buffer 01 02 03>
     * ```
     */
    writeBytes(value) {
        this.writeToBuffer(node_buffer_1.Buffer.from(value));
    }
    /**
     * Read raw bytes from the buffer
     * @param length The number of bytes to read
     * @returns The bytes read from the buffer
     * @example
     * ```javascript
     * const buffer = Buffer.from([ 0x01, 0x02, 0x03 ]);
     * const buf = new BufWrapper(buffer);
     * const decoded = buf.readBytes(3);
     * console.log(decoded); // <Buffer 01 02 03>
     * ```
     */
    readBytes(length) {
        const value = this.buffer.slice(this.offset, this.offset + length);
        this.offset += length;
        return value;
    }
    /**
     * Write a boolean to the buffer
     * @param value The value to write (boolean)
     * @example
     * ```javascript
     * const buf = new BufWrapper();
     * buf.writeBoolean(true);
     * console.log(buf.buffer); // <Buffer 01>
     * ```
     */
    writeBoolean(value) {
        this.writeToBuffer(node_buffer_1.Buffer.from([value ? 1 : 0]));
    }
    /**
     * Read a boolean from the buffer
     * @returns The boolean read from the buffer
     * @example
     * ```javascript
     * const buffer = Buffer.from([ 0x01 ]);
     * const buf = new BufWrapper(buffer);
     * const decoded = buf.readBoolean();
     * console.log(decoded); // true
     * ```
     */
    readBoolean() {
        const value = this.buffer.readUInt8(this.offset) === 1;
        this.offset += 1;
        return value;
    }
    /**
     * Write a float to the buffer
     * @param value The value to write (number)
     * @example
     * ```javascript
     * const buf = new BufWrapper();
     * buf.writeFloat(12.34);
     * console.log(buf.buffer); // <Buffer 41 45 70 a4>
     * ```
     */
    writeFloat(value) {
        const buf = node_buffer_1.Buffer.alloc(4);
        buf.writeFloatBE(value);
        this.writeToBuffer(buf);
    }
    /**
     * Read a float from the buffer
     * @returns The float read from the buffer
     * @example
     * ```javascript
     * const buffer = Buffer.from([ 0x41, 0x45, 0x70, 0xa4 ]);
     * const buf = new BufWrapper(buffer);
     * const decoded = buf.readFloat();
     * console.log(decoded); // 12.34000015258789
     * ```
     */
    readFloat() {
        const value = this.buffer.readFloatBE(this.offset);
        this.offset += 4;
        return value;
    }
    /**
     * Write a short to the buffer
     * @param value The value to write (number)
     * @example
     * ```javascript
     * const buf = new BufWrapper();
     * buf.writeShort(42);
     * console.log(buf.buffer); // <Buffer 00 2a>
     * ```
     */
    writeShort(value) {
        const buf = node_buffer_1.Buffer.alloc(2);
        buf.writeUInt16BE(value);
        this.writeToBuffer(buf);
    }
    /**
     * Read a float from the buffer
     * @returns The float read from the buffer
     * @example
     * ```javascript
     * const buffer = Buffer.from([ 0x00, 0x2a ]);
     * const buf = new BufWrapper(buffer);
     * const decoded = buf.readShort();
     * console.log(decoded); // 42
     * ```
     */
    readShort() {
        const value = this.buffer.readInt16BE(this.offset);
        this.offset += 2;
        return value;
    }
    /**
     * Write a double to the buffer
     * @param value The value to write (number)
     * @example
     * ```javascript
     * const buf = new BufWrapper();
     * buf.writeDouble(42.42);
     * console.log(buf.buffer); // <Buffer 40 45 35 c2 8f 5c 28 f6>
     * ```
     */
    writeDouble(value) {
        const buf = node_buffer_1.Buffer.alloc(8);
        buf.writeDoubleBE(value);
        this.writeToBuffer(buf);
    }
    /**
     * Read a double from the buffer
     * @returns The double read from the buffer
     * @example
     * ```javascript
     * const buffer = Buffer.from([ 0x40, 4x45, 0x35, 0xc2, 0x8f, 0x5c, 0x28, 0xf6 ]);
     * const buf = new BufWrapper(buffer);
     * const decoded = buf.readShort();
     * console.log(decoded); // 42.42
     * ```
     */
    readDouble() {
        const value = this.buffer.readDoubleBE(this.offset);
        this.offset += 8;
        return value;
    }
    /**
     * When the `BufWrapperOptions#oneConcat` is set to `true`
     * you must call this method to concatenate all buffers
     * into one. If the option is `undefined` or set to `false`,
     * this method will throw an error.
     *
     * This method will also set the `BufWrapper#buffer` to the
     * concatenated buffer.
     * @returns The concatenated buffer.
     */
    finish() {
        if (this.options?.oneConcat !== true)
            throw new Error("Can't call BufWrapper#finish without oneConcat option set to true");
        const buf = node_buffer_1.Buffer.concat([...this.buffers]);
        this.buffer = buf;
        return buf;
    }
    /**
     * Concat the given buffers into the main buffer
     * if `BufWrapperOptions#oneConcat` is `false` or `undefined`.
     * Otherwise, it will push the buffer to the `BufWrapper#buffers`
     * array.
     * @param value The buffers to write (array of buffers)
     */
    writeToBuffer(...buffers) {
        if (this.options?.oneConcat === true)
            this.buffers.push(...buffers);
        else
            this.buffer = node_buffer_1.Buffer.concat([this.buffer, ...buffers]);
    }
}
exports.BufWrapper = BufWrapper;
