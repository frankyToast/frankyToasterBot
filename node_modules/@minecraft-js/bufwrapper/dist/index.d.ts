/// <reference types="node" />
import { UUID } from '@minecraft-js/uuid';
import { Buffer } from 'node:buffer';
export declare class BufWrapper<Plugins extends BufWrapperPluginsArgument = BufWrapperPluginsArgument> {
    /**
     * The wrapped NodeJS buffer
     */
    buffer: Buffer;
    /**
     * Current offset (used for reading)
     */
    offset: number;
    /**
     * Options that apply to the current `BufWrapper` instance
     */
    options?: BufWrapperOptions<Plugins>;
    /**
     * Installed plugins so you can access them from this object
     */
    plugins: BufWrapperPlugins<Plugins>;
    /** List of buffers, used for the `oneConcat` option */
    private buffers;
    /**
     * Create a new buffer wrapper instance
     * @param buffer The NodeJS buffer to wrap, optional
     * @param options Options to apply to the buffer wrapper, optional
     */
    constructor(buffer?: Buffer | null, options?: BufWrapperOptions<Plugins>);
    /**
     * Write a varint to the buffer
     * @param value The value to write (number)
     * @example
     * ```javascript
     * const buf = new BufWrapper();
     * buf.writeVarInt(300);
     * console.log(buf.buffer); // <Buffer ac 02>
     * ```
     */
    writeVarInt(value: number): void;
    /**
     * Read a varint from the buffer
     * @returns The varint value read from the buffer
     * @example
     * ```javascript
     * const buffer = Buffer.from([0xac, 0x02]);
     * const buf = new BufWrapper(buffer);
     * const decoded = buf.readVarInt();
     * console.log(decoded); // 300
     * ```
     */
    readVarInt(): number;
    /**
     * Write a string to the buffer (will use the ut8 encoding)
     * @param value The value to write (string)
     * @example
     * ```javascript
     * const buf = new BufWrapper();
     * buf.writeString('Hello World');
     * console.log(buf.buffer); // <Buffer 0b 48 65 6c 6c 6f 20 57 6f 72 6c 64>
     * ```
     */
    writeString(value: string): void;
    /**
     * Read a string from the buffer (will use the ut8 encoding)
     * @returns The string value read from the buffer
     * @example
     * ```javascript
     * const buffer = Buffer.from([0x0b, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64]);
     * const buf = new BufWrapper(buffer);
     * const decoded = buf.readString();
     * console.log(decoded); // Hello World
     * ```
     */
    readString(): string;
    /**
     * Write an integer to the buffer
     * @param value The value to write (number)
     * @example
     * ```javascript
     * const buf = new BufWrapper();
     * buf.writeInt(123);
     * console.log(buf.buffer); // <Buffer 00 00 00 7b>
     * ```
     */
    writeInt(value: number): void;
    /**
     * Read an integer from the buffer
     * @returns The integer value read from the buffer
     * @example
     * ```javascript
     * const buffer = Buffer.from([0x00, 0x00, 0x00, 0x7b]);
     * const buf = new BufWrapper(buffer);
     * const decoded = buf.readInt();
     * console.log(decoded); // 123
     * ```
     */
    readInt(): number;
    /**
     * Write a long to the buffer
     * @param value The value to write (number)
     * @example
     * ```javascript
     * const buf = new BufWrapper();
     * buf.writeLong(123456789);
     * console.log(buf.buffer); // <Buffer 00 00 00 00 07 5b cd 15>
     * ```
     */
    writeLong(value: number | bigint): void;
    /**
     * Read a long from the buffer
     * @returns The long value read from the buffer
     * @example
     * ```javascript
     * const buffer = Buffer.from([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x5b, 0xcd, 0x15]);
     * const buf = new BufWrapper(buffer);
     * const decoded = buf.readLong();
     * console.log(decoded); // 123456789
     * ```
     */
    readLong(): number;
    /**
     * Write an array of strings to the buffer
     * @param value The value to write (string[])
     * @example
     * ```javascript
     * const buf = new BufWrapper();
     * buf.writeStringArray(['Hello', 'World']);
     * console.log(buf.buffer); // <Buffer 02 05 48 65 6c 6c 6f 05 57 6f 72 6c 64>
     * ```
     */
    writeStringArray(value: string[]): void;
    /**
     * Read an array of strings from the buffer
     * @returns The array read from the buffer
     * @example
     * ```javascript
     * const buffer = Buffer.from([0x02, 0x05, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x05, 0x57, 0x6f, 0x72, 0x6c, 0x64]);
     * const buf = new BufWrapper(buffer);
     * const decoded = buf.readStringArray();
     * console.log(decoded); // ['Hello', 'World']
     * ```
     */
    readStringArray(): string[];
    /**
     * Write an array of ints to the buffer
     * @param value The value to write (number[])
     * @example
     * ```javascript
     * const buf = new BufWrapper();
     * buf.writeIntArray([1, 2, 3]);
     * console.log(buf.buffer); // <Buffer 03 00 00 00 01 00 00 00 02 00 00 00 03>
     * ```
     */
    writeIntArray(value: number[]): void;
    /**
     * Read an array of ints from the buffer
     * @returns The array read from the buffer
     * @example
     * ```javascript
     * const buffer = Buffer.from([ 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03 ]);
     * const buf = new BufWrapper(buffer);
     * const decoded = buf.readIntArray();
     * console.log(decoded); // [ 1, 2, 3 ]
     * ```
     */
    readIntArray(): number[];
    /**
     * Write an UUID to the buffer
     * @param value The value to write (`UUID` instance)
     * @example
     * ```javascript
     * import { parseUUID } from '@minecraft-js/uuid';
     * const uuid = parseUUID('c09b74b4-8c14-44cb-b567-6576a2daf1f9');
     *
     * const buf = new BufWrapper();
     * buf.writeUUID(uuid);
     * console.log(buf.buffer); // <Buffer C0 9B 74 B4 8C 14 44 CB B5 67 65 76 A2 DA F1 F9>
     * ```
     */
    writeUUID(value: UUID): void;
    /**
     * Read an UUID from the buffer
     * @returns The UUID read from the buffer
     * @example
     * ```javascript
     * const buffer = Buffer.from([ 0xC0, 0x9B, 0x74, 0xB4, 0x8C, 0x14, 0x44, 0xCB, 0xB5, 0x67, 0x65, 0x76, 0xA2, 0xDA, 0xF1, 0xF9 ]);
     * const buf = new BufWrapper(buffer);
     * const decoded = buf.readUUID();
     * console.log(decoded); // UUID <c09b74b4-8c14-44cb-b567-6576a2daf1f9>
     * ```
     */
    readUUID(): UUID;
    /**
     * Write raw bytes to the buffer
     * @param value The value to write (a buffer or an array of bytes)
     * @example
     * ```javascript
     * const buf = new BufWrapper();
     * buf.writeBytes([ 0x01, 0x02, 0x03 ]);
     * console.log(buf.buffer); // <Buffer 01 02 03>
     * ```
     */
    writeBytes(value: Buffer | number[]): void;
    /**
     * Read raw bytes from the buffer
     * @param length The number of bytes to read
     * @returns The bytes read from the buffer
     * @example
     * ```javascript
     * const buffer = Buffer.from([ 0x01, 0x02, 0x03 ]);
     * const buf = new BufWrapper(buffer);
     * const decoded = buf.readBytes(3);
     * console.log(decoded); // <Buffer 01 02 03>
     * ```
     */
    readBytes(length: number): Buffer;
    /**
     * Write a boolean to the buffer
     * @param value The value to write (boolean)
     * @example
     * ```javascript
     * const buf = new BufWrapper();
     * buf.writeBoolean(true);
     * console.log(buf.buffer); // <Buffer 01>
     * ```
     */
    writeBoolean(value: boolean): void;
    /**
     * Read a boolean from the buffer
     * @returns The boolean read from the buffer
     * @example
     * ```javascript
     * const buffer = Buffer.from([ 0x01 ]);
     * const buf = new BufWrapper(buffer);
     * const decoded = buf.readBoolean();
     * console.log(decoded); // true
     * ```
     */
    readBoolean(): boolean;
    /**
     * Write a float to the buffer
     * @param value The value to write (number)
     * @example
     * ```javascript
     * const buf = new BufWrapper();
     * buf.writeFloat(12.34);
     * console.log(buf.buffer); // <Buffer 41 45 70 a4>
     * ```
     */
    writeFloat(value: number): void;
    /**
     * Read a float from the buffer
     * @returns The float read from the buffer
     * @example
     * ```javascript
     * const buffer = Buffer.from([ 0x41, 0x45, 0x70, 0xa4 ]);
     * const buf = new BufWrapper(buffer);
     * const decoded = buf.readFloat();
     * console.log(decoded); // 12.34000015258789
     * ```
     */
    readFloat(): number;
    /**
     * Write a short to the buffer
     * @param value The value to write (number)
     * @example
     * ```javascript
     * const buf = new BufWrapper();
     * buf.writeShort(42);
     * console.log(buf.buffer); // <Buffer 00 2a>
     * ```
     */
    writeShort(value: number): void;
    /**
     * Read a float from the buffer
     * @returns The float read from the buffer
     * @example
     * ```javascript
     * const buffer = Buffer.from([ 0x00, 0x2a ]);
     * const buf = new BufWrapper(buffer);
     * const decoded = buf.readShort();
     * console.log(decoded); // 42
     * ```
     */
    readShort(): number;
    /**
     * Write a double to the buffer
     * @param value The value to write (number)
     * @example
     * ```javascript
     * const buf = new BufWrapper();
     * buf.writeDouble(42.42);
     * console.log(buf.buffer); // <Buffer 40 45 35 c2 8f 5c 28 f6>
     * ```
     */
    writeDouble(value: number): void;
    /**
     * Read a double from the buffer
     * @returns The double read from the buffer
     * @example
     * ```javascript
     * const buffer = Buffer.from([ 0x40, 4x45, 0x35, 0xc2, 0x8f, 0x5c, 0x28, 0xf6 ]);
     * const buf = new BufWrapper(buffer);
     * const decoded = buf.readShort();
     * console.log(decoded); // 42.42
     * ```
     */
    readDouble(): number;
    /**
     * When the `BufWrapperOptions#oneConcat` is set to `true`
     * you must call this method to concatenate all buffers
     * into one. If the option is `undefined` or set to `false`,
     * this method will throw an error.
     *
     * This method will also set the `BufWrapper#buffer` to the
     * concatenated buffer.
     * @returns The concatenated buffer.
     */
    finish(): Buffer;
    /**
     * Concat the given buffers into the main buffer
     * if `BufWrapperOptions#oneConcat` is `false` or `undefined`.
     * Otherwise, it will push the buffer to the `BufWrapper#buffers`
     * array.
     * @param value The buffers to write (array of buffers)
     */
    writeToBuffer(...buffers: Buffer[]): void;
}
declare type ArgumentTypes<F extends Function> = F extends (...args: infer A) => any ? A : never;
export declare type BufWrapperPlugins<Argument extends BufWrapperPluginsArgument> = {
    [plugin in keyof Argument]: {
        [key in keyof Argument[plugin]]: (...args: ArgumentTypes<Argument[plugin][key]>) => ReturnType<Argument[plugin][key]>;
    };
};
/** Type used as default value for the `BufWrapper#plugins` property */
export declare type BufWrapperPluginsArgument = {
    [key: string]: {
        [key: string]: (...args: any[]) => any;
    };
};
export interface BufWrapperOptions<Plugins> {
    /**
     * Whether or not to run the `Buffer#concat` method when writing.
     * When set to `true`, you will have to call the `BufWrapper#finish`
     * method to get the final buffer. (Making this true and calling)
     * the `BufWrapper#finish` will increase performance.
     * When set to `false`, the `BufWrapper#finish` method will throw an error
     * and the `Buffer#concat` will be run every time you write something
     * to the buffer.
     */
    oneConcat?: boolean;
    /**
     * Plugins you want to install on the BufferWrapper intance
     * you are about to create
     * @exemple
     * ```javascript
     * // Plugin we are creating
     * const BufWrapperPlugin = {
     *   writeCustomType(data) {
     *     // You can access the BufWrapper
     *     // instance with the `this` keyword
     *   },
     *   readCustomType() {
     *     // Do stuff
     *     return someValue;
     *   }
     * }
     *
     * // Setting the first argument as null
     * // since we don't have any data yet
     * const buf = new BufWrapper(null, {
     *   plugins: { BufWrapperPlugin }
     * });
     *
     * // Call the plugin's method
     * buf.plugins.BufWrapperPlugin.writeCustomType(yourData);
     * buf.plugins.BufWrapperPlugin.readCustomType();
     * ```
     */
    plugins?: Plugins;
}
export {};
