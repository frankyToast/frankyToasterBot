/// <reference types="node" />
/**
 * UUID Class
 */
export declare class UUID {
    /** Buffer containing the bytes for this UUID */
    private bytes;
    /**
     * Object containing results of the `.toString` method.
     * The `.toString` executes regex to check for string
     * validity and can be slow when used multiple times.
     * These cached values avoids multiple executions of
     * the regex.
     */
    private stringCache;
    /**
     * Constructs a new UUID using the specified data.
     * @param mostSigBits The most significant bits of the UUID
     * @param leastSigBits The least significant bits of the UUID
     */
    constructor(mostSigBits: Buffer, leastSigBits: Buffer);
    /** The most significant 64 bits of this UUID's 128 bit value */
    getMostSignificantBits(): Buffer;
    /** The least significant 64 bits of this UUID's 128 bit value */
    getLeastSignificantBits(): Buffer;
    /** Converts this `UUID` instance to a JSON valid format */
    toJSON(dashes?: boolean): string;
    /** Converts this `UUID` instance to a serializable string */
    toString(dashes?: boolean): string;
    /** The version for this `UUID` */
    get version(): number;
    /** The variant for this `UUID` */
    get variant(): number;
    /**
     * This method is executed when the `UUID`
     * instance is used in a "primitive context".
     *
     * @example
     * ```javascript
     * const uuid = new UUID(...);
     *
     * // Without this method
     * console.log('UUID: ' + uuid); // -> 'UUID: [object Object]'
     *
     * // With this method
     * console.log('UUID: ' + uuid); // -> 'UUID: 7ed9e77e-34b8-400e-b684-9093c550b4f9'
     * ```
     * @returns A string containing the UUID
     */
    [Symbol.toPrimitive](): string;
}
