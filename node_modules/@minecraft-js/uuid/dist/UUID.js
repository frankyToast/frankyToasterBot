"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UUID = void 0;
const addDashesToUUID_1 = require("./utils/addDashesToUUID");
/**
 * UUID Class
 */
class UUID {
    /**
     * Constructs a new UUID using the specified data.
     * @param mostSigBits The most significant bits of the UUID
     * @param leastSigBits The least significant bits of the UUID
     */
    constructor(mostSigBits, leastSigBits) {
        this.bytes = Buffer.allocUnsafe(16);
        mostSigBits.copy(this.bytes);
        leastSigBits.copy(this.bytes, 8);
        this.stringCache = {};
    }
    /** The most significant 64 bits of this UUID's 128 bit value */
    getMostSignificantBits() {
        return this.bytes.subarray(0, 8);
    }
    /** The least significant 64 bits of this UUID's 128 bit value */
    getLeastSignificantBits() {
        return this.bytes.subarray(8, 16);
    }
    /** Converts this `UUID` instance to a JSON valid format */
    toJSON(dashes = true) {
        return this.toString(dashes);
    }
    /** Converts this `UUID` instance to a serializable string */
    toString(dashes = true) {
        const key = dashes ? 'dashes' : 'noDashes';
        const cached = this.stringCache[key];
        if (cached)
            return cached;
        const string = this.bytes.toString('hex');
        const result = dashes ? (0, addDashesToUUID_1.addDashesToUUID)(string) : string;
        this.stringCache[key] = result;
        return result;
    }
    /** The version for this `UUID` */
    get version() {
        return parseInt(this.toString(false).slice(12, 13), 16);
    }
    /** The variant for this `UUID` */
    get variant() {
        return parseInt(this.toString(false).slice(16, 17), 16);
    }
    /**
     * This method is executed when the `UUID`
     * instance is used in a "primitive context".
     *
     * @example
     * ```javascript
     * const uuid = new UUID(...);
     *
     * // Without this method
     * console.log('UUID: ' + uuid); // -> 'UUID: [object Object]'
     *
     * // With this method
     * console.log('UUID: ' + uuid); // -> 'UUID: 7ed9e77e-34b8-400e-b684-9093c550b4f9'
     * ```
     * @returns A string containing the UUID
     */
    [Symbol.toPrimitive]() {
        return this.toString();
    }
    /**
     * This method is executed when `inspect` from
     * the `node:util` module is run on this instance.
     *
     * This method returns a fancy string for developers
     * so they can debug with ease.
     * @returns A fancy string
     */
    [Symbol.for('nodejs.util.inspect.custom')]() {
        return `UUID <${this.toString()}>`;
    }
}
exports.UUID = UUID;
